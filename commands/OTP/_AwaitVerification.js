/*CMD
  command: /AwaitVerification
  help: 
  need_reply: true
  auto_retry_time: 
  folder: OTP

  <<ANSWER

  ANSWER

  <<KEYBOARD

  KEYBOARD
  aliases: 
  group: 
CMD*/

var code = User.getProperty("OTP")
var validUntil = User.getProperty("OTP_ValidUntil")

// Bot Advertising
var ads = [
  "@MaximXEmojis - Dive into a collection of expressive emojis for every mood! Join now and add flair to your conversations.",
  "@MaximXSticker - Discover vibrant and diverse sticker packs to enhance your messaging experience. Join us for a visual delight!",
  "@MaximXBots - Engage with cutting-edge bots designed for fun, utility, and more. Join the bot revolution and elevate your Telegram experience!",
  "@MaximXWallpaper - Immerse yourself in a gallery of stunning wallpapers to revamp your device's look. Join for a daily dose of aesthetic inspiration.",
  "@MaximXIcons - Upgrade your profile with unique and stylish icons. Join now and make your profile stand out!",
  "@MaximXAnime - Dive into the world of anime with curated recommendations and community discussions. Join us and elevate your anime experience!"
]
var randomAd = ads[Math.floor(Math.random() * ads.length)]

// Text Message
var cap = `<b>‚ö†Ô∏è Y·¥è·¥ú Ä O·¥õ·¥ò H·¥Äs Ex·¥ò…™ Ä·¥á·¥Ö. R·¥á ü·¥è·¥Ä·¥Ö A N·¥á·¥° O…¥·¥á.</b>

üìÆ A·¥Ös: <a href='t.me/QuinxAds'>“®·¥ú…™…¥x A·¥Ös</a>
<blockquote>${randomAd}</blockquote>`

if (Date.now() > validUntil) {
  // OTP Expired
  Api.editMessageText({
    message_id: User.getProperty("mmm"),
    text: cap,
    parse_mode: "HTML",
    disable_web_page_preview: true,
    reply_markup: {
      inline_keyboard: [
        [
          { text: "‚óÅ B·¥Ä·¥Ñ·¥ã", callback_data: "/start" },
          { text: "C ü·¥ès·¥á ‚úï", callback_data: "/close" }
        ]
      ]
    }
  })
  Bot.runCommand("/generateOTP")
  return
}

if (message == code) {
  // OTP Correct
  Api.editMessageText({
    message_id: User.getProperty("mmm"),
    text: "<b>üöÄ Y·¥è·¥ú H·¥Ä·¥†·¥á B·¥á·¥á…¥ V·¥á Ä…™“ì…™·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è.</b>",
    parse_mode: "HTML",
    disable_web_page_preview: true,
    reply_markup: {
      inline_keyboard: [
        [
          { text: "‚óÅ B·¥Ä·¥Ñ·¥ã", callback_data: "/start" },
          { text: "C ü·¥ès·¥á ‚úï", callback_data: "/close" }
        ]
      ]
    }
  })
  Bot.runCommand("/addBot")
} else {
  // OTP Incorrect
  Api.editMessageText({
    message_id: User.getProperty("mmm"),
    text: "<b>‚ö†Ô∏è E Ä Ä·¥è Ä! Y·¥è·¥ú E…¥·¥õ·¥á Ä·¥á·¥Ö T ú·¥á W Ä·¥è…¥…¢ O·¥õ·¥ò. P ü·¥á·¥Äs·¥á T Ä è A…¢·¥Ä…™…¥.</b>",
    parse_mode: "HTML",
    disable_web_page_preview: true,
    reply_markup: {
      inline_keyboard: [
        [
          { text: "‚óÅ B·¥Ä·¥Ñ·¥ã", callback_data: "/start" },
          { text: "C ü·¥ès·¥á ‚úï", callback_data: "/close" }
        ]
      ]
    }
  })
  Bot.runCommand("/generateOTP")
}

